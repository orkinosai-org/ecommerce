// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  firstName       String
  lastName        String
  password        String
  role            UserRole @default(CUSTOMER)
  isEmailVerified Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  orders  Order[]
  reviews Review[]

  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  imageUrl    String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id            String   @id @default(cuid())
  name          String
  description   String
  price         Decimal  @db.Decimal(10, 2)
  sku           String   @unique
  stockQuantity Int      @default(0)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Foreign keys
  categoryId String
  
  // Relations
  category   Category     @relation(fields: [categoryId], references: [id])
  images     ProductImage[]
  reviews    Review[]
  orderItems OrderItem[]

  // Computed fields for aggregations
  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  altText   String?
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())

  // Foreign keys
  productId String

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign keys
  productId String
  userId    String

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Constraints
  @@unique([productId, userId]) // One review per user per product
  @@map("reviews")
}

model Order {
  id             String      @id @default(cuid())
  status         OrderStatus @default(PENDING)
  totalAmount    Decimal     @db.Decimal(10, 2)
  shippingStreet String
  shippingCity   String
  shippingState  String
  shippingZip    String
  shippingCountry String
  billingStreet  String?
  billingCity    String?
  billingState   String?
  billingZip     String?
  billingCountry String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Foreign keys
  userId String

  // Relations
  user  User        @relation(fields: [userId], references: [id])
  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id       String  @id @default(cuid())
  quantity Int
  price    Decimal @db.Decimal(10, 2) // Price at time of order

  // Foreign keys
  orderId   String
  productId String

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

enum UserRole {
  CUSTOMER
  ADMIN
  MODERATOR
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}